#!/usr/bin/env python3
# Importing Library
from cryptography.fernet import Fernet
import time, os

#Script Name: Ops401challenge08
#Author:Bubacarr Darboe          
#Date of last revision: 10/14/2020
#Description of purpose: file encryption and decryption complete
# Declare Variable
path = “./newFolder”
file = "text2dencrypt.txt"
output = “”
# Declare functions
def mode_entry():
    global output
    print(“”"
    Please select a mode.
    (mode 1)Encrypt a file 
    (mode 2)Decrypt a file 
    (mode 3)Encrypt a message 
    (mode 4)Decrypt a message 
    (mode 5)Encrypt a folder 
    (mode 6)Decrypt a folder 
    (mode 7)Alter Desktop Wallpaper
    (mode 8)Create popup window
     9)
     exit
    “”")
    userInput = input(“option ? “)
    if(userInput == “mode 1”):
        encryptFile(file2, key)
    elif(userInput == “mode 2”):
        decryptFile(file2, key)
    elif (userInput == “mode 3”):
        output = encryptMessage()
    elif (userInput == “mode 4”):
        decryptMessage(output)
    elif(userInput == “mode 5”):
        encrptFolder(path)
    elif(userInput == “mode 6”):
        decryptFolder(path)
    elif (userInput == “mode 7”):
       elif(userInput == “mode 8”):
        Alter desktop(path)
    elif(userInput == “9”):
        create a popup window(path)
    else:
       print("This is the end!")
       exit(0)

def encryptFile(file, key):
    f = Fernet(key)
    with open(file, “rb”) as fileread:
        readfile = fileread.read()
    encryptFile = f.encrypt(readfile)
    with open(file, “wb”) as filewrite:
        filewrite.write(encryptFile)
        time.sleep(2)
        print(“file has been encrypted”)
def decryptFile(file, key):
    f = Fernet(key)
    with open(file, “rb”) as fileread:
        # read the encrypted data
        encrypted_data = fileread.read()
    # decrypt data
    decrypted_data = f.decrypt(encrypted_data)
    # write the original file
    with open(file, “wb”) as filewrite:
        filewrite.write(decrypted_data)
        time.sleep(2)
        print(“file has been decrypted”)
def generateKey():
    key = Fernet.generate_key()
    with open(“last.key”, “wb”) as key_file:
        key_file.write(key)
def loadKey():
    return open(“last.key”, “rb”).read()
# Encrypt a message (mode 3)
def encryptMessage():
    f = Fernet(key)
    userMessage = input (“Enter your message to encrypt.“).encode()
    encryptedMessage = f.encrypt(userMessage)
    print (encryptedMessage)
    return encryptedMessage
def decryptMessage(msg):
    f = Fernet(key)
    decryptMsg = f.decrypt(msg)
    print (decryptMsg)
def encrptFolder(dirNames):
    completeFileList = list()
    for (dirPath, dirName, fileName) in os.walk(dirNames):
        completeFileList += [os.path.join(dirPath, file) for file in fileName]
    for fil in completeFileList:
        print(fil)
        encryptFile(fil, key)
def decryptFolder(dirNames):
    completeFileList = list()
    for (dirPath, dirName, fileName) in os.walk(dirNames):
        completeFileList += [os.path.join(dirPath, file) for file in fileName]
    for fil in completeFileList:
        print(fil)
        decryptFile(fil, key)
# main
write_key()
# load the previously generated key
key = load_key()
while(1):
    mode_entry()
# End
